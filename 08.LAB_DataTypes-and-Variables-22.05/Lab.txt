VSCode is SUPER Front-end IDE.
Типове данни
Object:	-колекция от детайли
	-синстаксис за "чист" обект: let nameObject = {свойство: стойност, ...}
	-функциите са от тип обект
	-масивите са от тип обект
Array: 	-колекция от неща
	-е от тип обект
	-допустимо е да съдържа различни типове данни, но не е препоръчително!
	-Масив от обекти се използва, даже често!
Boolean: e следствие!

Null: има стойност = 0
Undefined: няма стойност
NaN е от тип number!


JS не е строго типизиран защото след инициализиране, в последствие може да промени не само стойността си (както е нормално за променливите), а и типа си.
 
Достъпване и деклариране на променливи
Scope се определя от това къде се декларира променливата! 
1. Global scope важи дори за различни парчета (<script></script>)
2. Block scope
3. Function-Block scope

var
let
const
let и const имат еднакви правила за scope

Наименуване на променливи
camelCase
без цифри в имената им


Интерполация `...${}...`
Конкатенация +

без console.log в return!
Функцията да върши едно нещо!

Рефрактуриране???

return	-за комуникация с "външния свят"
	-чаканата стойност от свършената работа на функцията
	-без него връща undefined
	-ако искаме да върне няколко неща ги комбинираме в обект. Синтаксис: return {}
	-също приклщчва функцията = break
	-и един вид ѝ присвоява стойност

Конвертиране
Number() е конструктор. Експлицитна конверсия
Имплицитна конверсия???
parse...

Тернарен оператор-синтаксис:	 условие ? '.Т.' : '.F.'
			-съкратен вариант на един условен оператор if, else



